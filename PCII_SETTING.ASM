;===== PCII_SETTING.ASM ========================================
;	設定処理
;				toya@v007.vaio.ne.jp
;	CPU H8/3664-3694
;-------------------------------------------------

	.FORM	COL=120
	.PRINT	LIST		;アセンブル時にリストファイルを出力する
	.CPU 300HN		;ＣＰＵの指定

	.INCLUDE "PCII.inc"

	.EXPORT		SETTING_DISP
	.EXPORT		SETTING_SW1
	.EXPORT		SETTING_SW2

	.IMPORT		SCI3_INIT
	.IMPORT		SCI3_HOST_INIT
	.IMPORT 	SEND_CHAR
	.IMPORT		SEND_BYTE
	.IMPORT 	SEND_WORD
	.IMPORT 	SEND_MSG
	.IMPORT		GET_CHAR

	.IMPORT		LCD_TEXT_OFFSET
	.IMPORT		LCD_CLR_CS1
	.IMPORT		LCD_CLR_CS2
	.IMPORT		LCD_CHAR
	.IMPORT		LCD_STRING
	.IMPORT		LCD_CHAR_INV
	.IMPORT		LCD_STRING_INV
	.IMPORT		LCD_DEC_000

	.IMPORT		LAP_SETTING_SECTOR
	.IMPORT		GET_SECTORS
	.IMPORT		VL53L0X_RATE
	.IMPORT		VL53L0X_GET_RATE

	.IMPORT		GET_G_OFF_ON
	.IMPORT		TURN_G_OFF_ON

	.IMPORT		GET_MGS_MODE
	.IMPORT		TURN_MGS_MODE

	.IMPORT		EEPROM_READ_PAGE

NUMS_MODE	.EQU	5

;=================================================
	.SECTION ROM, CODE, ALIGN=2
;-------------------------------------------------
SETTING_DISP:	MOV.B	#0, R0L
		MOV.B	R0L, @SETTING_MODE
		MOV.B	R0L, @SW2_MODE
		JSR	@SETTING_DISP_INIT
		RTS

SETTING_SW1:
		MOV.B	#0, R0L
		MOV.B	R0L, @SW2_MODE
		MOV.B	@SETTING_MODE,R0L
		INC.B	R0L
		CMP.B	#NUMS_MODE, R0L
		BNE	SETTING_SW1_L1
		MOV.B	#0, R0L
SETTING_SW1_L1:
		MOV.B	R0L, @SETTING_MODE
SETTING_SW1_MODE0:					; LAP
		CMP.B	#0, R0L
		BNE	SETTING_SW1_MODE1
		MOV.B	#1, R0H
		JSR	@SETTING_LAP_DISP
		MOV.B	#0, R0H
		JSR	@SETTING_G_SENSOR_DISP
		JSR	@SETTING_MG_SENSOR_DISP
		JSR	@SETTING_SUS_DISP
		JSR	@SETTING_DATA2HOST_DISP
		JMP	@SETTING_SW1_E
SETTING_SW1_MODE1:					; G SENSOR AXIS
		CMP.B	#1, R0L
		BNE	SETTING_SW1_MODE2
		MOV.B	#1, R0H
		JSR	@SETTING_G_SENSOR_DISP
		MOV.B	#0, R0H
		JSR	@SETTING_LAP_DISP
		JSR	@SETTING_MG_SENSOR_DISP
		JSR	@SETTING_SUS_DISP
		JSR	@SETTING_DATA2HOST_DISP
		JMP	@SETTING_SW1_E
SETTING_SW1_MODE2:					; MG SENSOR OFF
		CMP.B	#2, R0L
		BNE	SETTING_SW1_MODE3
		MOV.B	#1, R0H
		JSR	@SETTING_MG_SENSOR_DISP
		MOV.B	#0, R0H
		JSR	@SETTING_LAP_DISP
		JSR	@SETTING_G_SENSOR_DISP
		JSR	@SETTING_SUS_DISP
		JSR	@SETTING_DATA2HOST_DISP
		JMP	@SETTING_SW1_E
SETTING_SW1_MODE3:
		CMP.B	#3, R0L
		BNE	SETTING_SW1_MODE4
		MOV.B	#1, R0H
		JSR	@SETTING_SUS_DISP
		MOV.B	#0, R0H
		JSR	@SETTING_LAP_DISP
		JSR	@SETTING_G_SENSOR_DISP
		JSR	@SETTING_MG_SENSOR_DISP
		JSR	@SETTING_DATA2HOST_DISP
		JMP	@SETTING_SW1_E
SETTING_SW1_MODE4:
		CMP.B	#4, R0L
		BNE	SETTING_SW1_MODE5
		MOV.B	#0, R0H
		JSR	@SETTING_LAP_DISP
		JSR	@SETTING_G_SENSOR_DISP
		JSR	@SETTING_MG_SENSOR_DISP
		JSR	@SETTING_SUS_DISP
		MOV.W	#H'0608, R0
		JSR	@LCD_TEXT_OFFSET
		MOV.W	#DATA2HOST_STRAT_MSG, R0
		JSR	@LCD_STRING_INV
;;;		JMP	@SETTING_SW1_E
SETTING_SW1_MODE5:
SETTING_SW1_E:
		RTS

SETTING_SW2:
		MOV.B	@SETTING_MODE,R0L
SETTING_SW2_MODE0:					; LAP
		CMP.B	#0, R0L
		BNE	SETTING_SW2_MODE1
		JSR	@LAP_SETTING_SECTOR
		MOV.B	#1, R0H
		JSR	@SETTING_LAP_DISP
		JMP	@SETTING_SW2_E
SETTING_SW2_MODE1:					; G SENSOR AXIS
		CMP.B	#1, R0L
		BNE	SETTING_SW2_MODE2
		JSR	@TURN_G_OFF_ON
		MOV.B	#1, R0H
		JSR	@SETTING_G_SENSOR_DISP
		JMP	@SETTING_SW2_E
SETTING_SW2_MODE2:					; MG SENSOR OFF
		CMP.B	#2, R0L
		BNE	SETTING_SW2_MODE3
		JSR	@TURN_MGS_MODE
		MOV.B	#1, R0H
		JSR	@SETTING_MG_SENSOR_DISP
		JMP	@SETTING_SW2_E
SETTING_SW2_MODE3:
		CMP.B	#3, R0L
		BNE	SETTING_SW2_MODE5
		JSR	@VL53L0X_RATE
		MOV.B	#1, R0H
		JSR	@SETTING_SUS_DISP
		JMP	@SETTING_SW2_E
SETTING_SW2_MODE4:
		CMP.B	#4, R0L
		BNE	SETTING_SW2_MODE5
		MOV.B	@SW2_MODE, R0L
		BEQ	SETTING_SW2_MODE5_L
		CMP.B	#1,R0L
		BNE	SETTING_SW2_E			; NO NEED ONE MORE.
		INC.B	R0L
		MOV.B	R0L, @SW2_MODE
		MOV.W	#H'0608, R0
		JSR	@LCD_TEXT_OFFSET
		MOV.W	#DATA2HOST_DOING_MSG, R0
		JSR	@LCD_STRING_INV
		JSR	@DATA2HOST_ALLPAGE
		MOV.W	#H'0608, R0
		JSR	@LCD_TEXT_OFFSET
		MOV.W	#DATA2HOST_DONE_MSG, R0
		JSR	@LCD_STRING
		JMP	@SETTING_SW2_E
SETTING_SW2_MODE5_L:
		INC.B	R0L
		MOV.B	R0L, @SW2_MODE
		MOV.W	#H'0608, R0
		JSR	@LCD_TEXT_OFFSET
		MOV.W	#DATA2HOST_CONFIRM_MSG, R0
		JSR	@LCD_STRING_INV
;;;		JMP	@SETTING_SW2_E
SETTING_SW2_MODE5:
SETTING_SW2_E:
		RTS

;-------------------------------------------------
;	設定画面
;-------------------------------------------------
;	表示は、16x8。
;		+0123456789012345
;		+--------|-------+
;		| SETTING MENU   |
;		|SECTORS [ ](0-3)|
;		|G-AXIS  [0:NESW]|
;		|MG-SENS <OFF >  |
;		|                |
;		|DATA-TR <OFF>   |
;		+--------|-------+

SETTING_DISP_INIT:
		PUSH.W	R0
		JSR	@LCD_CLR_CS1
		JSR	@LCD_CLR_CS2
		MOV.W	#H'0000, R0
		JSR	@LCD_TEXT_OFFSET
		MOV.W	#SETTING_MSG_L0, R0
		JSR	@LCD_STRING
		MOV.W	#H'0100, R0
		JSR	@LCD_TEXT_OFFSET
		MOV.W	#SETTING_MSG_L1, R0
		JSR	@LCD_STRING
		MOV.W	#H'0200, R0
		JSR	@LCD_TEXT_OFFSET
		MOV.W	#SETTING_MSG_L2, R0
		JSR	@LCD_STRING
		MOV.W	#H'0300, R0
		JSR	@LCD_TEXT_OFFSET
		MOV.W	#SETTING_MSG_L3, R0
		JSR	@LCD_STRING
		MOV.W	#H'0400, R0
		JSR	@LCD_TEXT_OFFSET
		MOV.W	#SETTING_MSG_L4, R0
		JSR	@LCD_STRING
		MOV.W	#H'0500, R0
		JSR	@LCD_TEXT_OFFSET
		MOV.W	#SETTING_MSG_L5, R0
		MOV.W	#H'0600, R0
		JSR	@LCD_TEXT_OFFSET
		MOV.W	#SETTING_MSG_L6, R0

		JSR	@LCD_STRING
		MOV.W	#H'0008, R0
		JSR	@LCD_TEXT_OFFSET
		MOV.W	#SETTING_MSG_R0, R0
		JSR	@LCD_STRING
		MOV.W	#H'0108, R0
		JSR	@LCD_TEXT_OFFSET
		MOV.W	#SETTING_MSG_R1, R0
		JSR	@LCD_STRING
		MOV.W	#H'0208, R0
		JSR	@LCD_TEXT_OFFSET
		MOV.W	#SETTING_MSG_R2, R0
		JSR	@LCD_STRING
		MOV.W	#H'0308, R0
		JSR	@LCD_TEXT_OFFSET
		MOV.W	#SETTING_MSG_R3, R0
		JSR	@LCD_STRING
		MOV.W	#H'0408, R0
		JSR	@LCD_TEXT_OFFSET
		MOV.W	#SETTING_MSG_R4, R0
		JSR	@LCD_STRING
		MOV.W	#H'0508, R0
		JSR	@LCD_TEXT_OFFSET
		MOV.W	#SETTING_MSG_R5, R0
		JSR	@LCD_STRING
		MOV.W	#H'0608, R0
		JSR	@LCD_TEXT_OFFSET
		MOV.W	#SETTING_MSG_R6, R0
		JSR	@LCD_STRING

		MOV.B	#1, R0H
		JSR	@SETTING_LAP_DISP
		MOV.B	#0, R0H
		JSR	@SETTING_G_SENSOR_DISP
		JSR	@SETTING_MG_SENSOR_DISP
		JSR	@SETTING_SUS_DISP
		POP.W	R0
		RTS

SETTING_MSG_L0	.SDATA		" -SETTIN"
		.DATA.B		0
SETTING_MSG_L1	.SDATA		"SECTORS "
		.DATA.B		0
SETTING_MSG_L2	.SDATA		"G-AXIS  "
		.DATA.B		0
SETTING_MSG_L3	.SDATA		"MG-SENS "
		.DATA.B		0
SETTING_MSG_L4	.SDATA		"SUS-SCAL"
		.DATA.B		0
SETTING_MSG_L5	.SDATA		"        "
		.DATA.B		0
SETTING_MSG_L6	.SDATA		"DATA-TR "
		.DATA.B		0
SETTING_MSG_R0	.SDATA		"G MENU- "
		.DATA.B		0
SETTING_MSG_R1	.SDATA		"[ ](1-3)"
		.DATA.B		0
SETTING_MSG_R2	.SDATA		"[      ]"
		.DATA.B		0
SETTING_MSG_R3	.SDATA		"<OFF >  "
		.DATA.B		0
SETTING_MSG_R4	.SDATA		"[ ](0-3)"
		.DATA.B		0
SETTING_MSG_R5	.SDATA		"        "
		.DATA.B		0
SETTING_MSG_R6	.SDATA		"TO HOST."
		.DATA.B		0
		.ALIGN	2

;-------------------------------------------------
;	MENUの項目データH表示
;	IN ROH : 0-通常表示、1-反転表示
;-------------------------------------------------
SETTING_LAP_DISP:
		PUSH.W	R0
		PUSH.W	R1
		MOV.B	R0H, R1H
		MOV.W	#H'0109, R0
		JSR	@LCD_TEXT_OFFSET
		JSR	@GET_SECTORS
		ADD.B	#H'30, R0L
		CMP.B	#0, R1H
		BNE	SETTING_LAP_DISP_INV
		JSR	@LCD_CHAR
		JMP	@SETTING_LAP_DISP_E
SETTING_LAP_DISP_INV:
		JSR	@LCD_CHAR_INV
SETTING_LAP_DISP_E:
		POP.W	R1
		POP.W	R0
		RTS

SETTING_G_SENSOR_DISP:
		PUSH.W	R0
		PUSH.W	R1
		PUSH.W	R0
		MOV.W	#H'0209, R0
		JSR	@LCD_TEXT_OFFSET
		JSR	@GET_G_OFF_ON
		MOV.W	#G_MSG_M0, R1
		AND.B	#7, R0L
		MOV.B	#0, R0H
		SHAL.W	R0
		SHAL.W	R0
		SHAL.W	R0
		ADD.W	R1,R0
		POP.W	R1		; R0をR1でPOP
		CMP.B	#0, R1H
		BNE	SETTING_G_SENSOR_DISP_INV
		JSR	@LCD_STRING
		JMP	@SETTING_G_SENSOR_DISP_E
SETTING_G_SENSOR_DISP_INV:
		JSR	@LCD_STRING_INV
SETTING_G_SENSOR_DISP_E:
		POP.W	R1
		POP.W	R0
		RTS

G_MSG_M0	.SDATA		"0:NESW"
		.DATA.B		0,0
G_MSG_M1	.SDATA		"1:ESWN"
		.DATA.B		0,0
G_MSG_M2	.SDATA		"2:SWNE"
		.DATA.B		0,0
G_MSG_M3	.SDATA		"3:WNES"
		.DATA.B		0,0
G_MSG_M4	.SDATA		"4:NWSE"
		.DATA.B		0,0
G_MSG_M5	.SDATA		"5:WSEN"
		.DATA.B		0,0
G_MSG_M6	.SDATA		"6:SENW"
		.DATA.B		0,0
G_MSG_M7	.SDATA		"7:ENWS"
		.DATA.B		0,0
		.ALIGN	2

SETTING_MG_SENSOR_DISP:
		PUSH.W	R0
		PUSH.W	R1
		PUSH.W	R0
		MOV.W	#H'0309, R0
		JSR	@LCD_TEXT_OFFSET
		JSR	@GET_MGS_MODE
		CMP.B	#0, R0L
		BNE	SETTING_MG_SENSOR_DISP_L1
		MOV.W	#MG_MSG_OFF, R0
		JMP	@SETTING_MG_SENSOR_DISP_L3
SETTING_MG_SENSOR_DISP_L1:
		CMP.B	#1, R0L
		BNE	SETTING_MG_SENSOR_DISP_L2
		MOV.W	#MG_MSG_ON1, R0
		JMP	@SETTING_MG_SENSOR_DISP_L3
SETTING_MG_SENSOR_DISP_L2:
		MOV.W	#MG_MSG_ON2, R0
SETTING_MG_SENSOR_DISP_L3:
		POP.W	R1		; R0をR1でPOP
		CMP.B	#0, R1H
		BNE	SETTING_MG_SENSOR_DISP_INV
		JSR	@LCD_STRING
		JMP	@SETTING_MG_SENSOR_DISP_E
SETTING_MG_SENSOR_DISP_INV:
		JSR	@LCD_STRING_INV
SETTING_MG_SENSOR_DISP_E:
		POP.W	R1
		POP.W	R0
		RTS

MG_MSG_ON1	.SDATA		" ON "
		.DATA.B		0
MG_MSG_ON2	.SDATA		"WCHK"
		.DATA.B		0
MG_MSG_OFF	.SDATA		"OFF "
		.DATA.B		0
		.ALIGN	2

SETTING_SUS_DISP:
		PUSH.W	R0
		PUSH.W	R1
		MOV.B	R0H, R1H
		MOV.W	#H'0409, R0
		JSR	@LCD_TEXT_OFFSET
		JSR	@VL53L0X_GET_RATE
		ADD.B	#H'30, R0L
		CMP.B	#0, R1H
		BNE	SETTING_SUS_DISP_INV
		JSR	@LCD_CHAR
		JMP	@SETTING_SUS_DISP_E
SETTING_SUS_DISP_INV:
		JSR	@LCD_CHAR_INV
SETTING_SUS_DISP_E:
		POP.W	R1
		POP.W	R0
		RTS



;-------------------------------------------------
;	データ転送設定画面
;-------------------------------------------------
SETTING_DATA2HOST_DISP:
		PUSH.W	R0
		MOV.W	#H'0608, R0
		JSR	@LCD_TEXT_OFFSET
		MOV.W	#DATA2HOST_MSG, R0
		JSR	@LCD_STRING
		POP.W	R0
		RTS

DATA2HOST_MSG		.SDATA		"TO HOST."
			.DATA.B		0
DATA2HOST_STRAT_MSG	.SDATA		"=START?="
			.DATA.B		0
DATA2HOST_CONFIRM_MSG	.SDATA		"=CONF ?="
			.DATA.B		0
DATA2HOST_DOING_MSG	.SDATA		"=DOING.="
			.DATA.B		0
DATA2HOST_DONE_MSG	.SDATA		"=FINISH="
			.DATA.B		0
		.ALIGN	2

DATA2HOST_ALLPAGE:
		PUSH.W	R3
		JSR	@SCI3_HOST_INIT
		MOV.W	#0, R0
		MOV.W	R0, @I2C_NUM

DATA2HOST_ALLPAGE_L0:
		JSR	@GET_CHAR
		CMP.B	#0, R0H
		BEQ	DATA2HOST_ALLPAGE_L0		; RX BUFFER CLEAR

DATA2HOST_ALLPAGE_L1:
		MOV.W	#H'020C, R0
		JSR	@LCD_TEXT_OFFSET
		MOV.W	@I2C_NUM, R0
		JSR	@LCD_DEC_000

		MOV.W	@I2C_NUM, R0
		MOV.B	#H'0, R1H			; R1H MEMORY BOLOCK
		MOV.B	#EEPROM_PAGE_SIZE, R1L		; R1L SIZE
		JSR	@EEPROM_READ_PAGE		; RETURN R0:MEMORY ADDRESS
		MOV.W	R0, R3				; BUFFER POINTER

		MOV.B	@R3, R0L
		CMP.B	#0, R0L
		BEQ	DATA2HOST_ALLPAGE_NEXT

		MOV.W	#DATA2HOST_STR_SPN, R0
		JSR	@SEND_MSG
		JSR	@CHK_XON_XOFF		;;;
		MOV.W	@I2C_NUM, R0
		JSR	@SEND_WORD
		JSR	@CHK_XON_XOFF		;;;
		MOV.W	#DATA2HOST_STR_ENUM, R0
		JSR	@SEND_MSG
		JSR	@CHK_XON_XOFF		;;;
		MOV.W	#DATA2HOST_STR_CRLF, R0
		JSR	@SEND_MSG
		JSR	@CHK_XON_XOFF		;;;
		MOV.W	#DATA2HOST_STR_SDATA, R0
		JSR	@SEND_MSG
		JSR	@CHK_XON_XOFF		;;;
		MOV.B	#EEPROM_PAGE_SIZE, R1L

DATA2HOST_ALLPAGE_L2:
		MOV.B	@R3, R0L
		JSR	@SEND_BYTE
		JSR	@CHK_XON_XOFF		;;;
		MOV.B	#H'2C, R0L
		JSR	@SEND_CHAR
		JSR	@CHK_XON_XOFF		;;;
		INC.W	#1, R3
		DEC.B	R1L
		BNE	DATA2HOST_ALLPAGE_L2
		MOV.W	#DATA2HOST_STR_EDATA, R0
		JSR	@SEND_MSG
		JSR	@CHK_XON_XOFF		;;;
		MOV.W	#DATA2HOST_STR_EPAGE, R0
		JSR	@SEND_MSG
		JSR	@CHK_XON_XOFF		;;;
		MOV.W	#DATA2HOST_STR_CRLF, R0
		JSR	@SEND_MSG
		JSR	@CHK_XON_XOFF		;;;

DATA2HOST_ALLPAGE_NEXT:
		MOV.W	@I2C_NUM, R0
		INC.W	#1,R0
		MOV.W	R0, @I2C_NUM
		CMP.W	#512, R0
		BNE	DATA2HOST_ALLPAGE_L1
DATA2HOST_ALLPAGE_E:
		POP.W	R3
		JSR	@SCI3_INIT
		RTS

CHK_XON_XOFF:
		JSR	@GET_CHAR
		CMP.B	#0, R0H
		BNE	CHK_XON_XOFF_E
		CMP.B	#H'13,R0L
		BNE	CHK_XON_XOFF_E
CHK_XON:
		JSR	@GET_CHAR
		CMP.B	#0, R0H
		BNE	CHK_XON			; WAIT UNTIL XON RECIEVED.
		CMP.B	#H'11,R0L
		BNE	CHK_XON
CHK_XON_XOFF_E:
		RTS
	

DATA2HOST_STR_SPN	.SDATA		"<PAGE><NUMBER>"
			.DATA.B		0
DATA2HOST_STR_SDATA	.SDATA		"<DATA>"
			.DATA.B		0
DATA2HOST_STR_EDATA	.SDATA		"</DATA>"
			.DATA.B		0
DATA2HOST_STR_ENUM	.SDATA		"</NUMBER>"
			.DATA.B		0
DATA2HOST_STR_EPAGE	.SDATA		"</PAGE>"
			.DATA.B		0
DATA2HOST_STR_CRLF	.DATA.B		H'0D, H'0A, 0

		.ALIGN	2


;=================================================
	.SECTION PDATA, DATA, ALIGN=2

SETTING_MODE	.RES.B	1
SW2_MODE	.RES.B	1

I2C_NUM		.RES.W	1

		.ALIGN	2

	.END
